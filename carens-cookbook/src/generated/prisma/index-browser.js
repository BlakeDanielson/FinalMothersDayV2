
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  onboardingCompleted: 'onboardingCompleted',
  onboardingStep: 'onboardingStep',
  cookingSkillLevel: 'cookingSkillLevel',
  dietaryPreferences: 'dietaryPreferences',
  favoriteCuisines: 'favoriteCuisines',
  householdSize: 'householdSize',
  defaultProcessingMethod: 'defaultProcessingMethod',
  preferredCategories: 'preferredCategories',
  timezone: 'timezone',
  measurementSystem: 'measurementSystem'
};

exports.Prisma.RecipeScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  ingredients: 'ingredients',
  steps: 'steps',
  image: 'image',
  cuisine: 'cuisine',
  category: 'category',
  prepTime: 'prepTime',
  cleanupTime: 'cleanupTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categorySource: 'categorySource',
  categoryConfidence: 'categoryConfidence',
  originalCategory: 'originalCategory',
  userId: 'userId'
};

exports.Prisma.RecipeImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  alt: 'alt',
  isPrimary: 'isPrimary',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  recipeId: 'recipeId'
};

exports.Prisma.RecipeFavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recipeId: 'recipeId',
  createdAt: 'createdAt'
};

exports.Prisma.UserOnboardingProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  stepId: 'stepId',
  stepKey: 'stepKey',
  completedAt: 'completedAt',
  skippedAt: 'skippedAt',
  data: 'data',
  isRequired: 'isRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecipeExtractionMetricsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  recipeUrl: 'recipeUrl',
  domain: 'domain',
  requestTimestamp: 'requestTimestamp',
  primaryStrategy: 'primaryStrategy',
  aiProvider: 'aiProvider',
  fallbackUsed: 'fallbackUsed',
  fallbackReason: 'fallbackReason',
  totalDuration: 'totalDuration',
  htmlFetchDuration: 'htmlFetchDuration',
  aiProcessingDuration: 'aiProcessingDuration',
  validationDuration: 'validationDuration',
  databaseSaveDuration: 'databaseSaveDuration',
  htmlContentSize: 'htmlContentSize',
  cleanedContentSize: 'cleanedContentSize',
  promptTokens: 'promptTokens',
  responseTokens: 'responseTokens',
  totalTokens: 'totalTokens',
  extractionSuccess: 'extractionSuccess',
  validationErrors: 'validationErrors',
  missingFields: 'missingFields',
  completenessScore: 'completenessScore',
  categoryConfidence: 'categoryConfidence',
  hasStructuredData: 'hasStructuredData',
  estimatedCost: 'estimatedCost',
  recipeId: 'recipeId',
  wasOptimal: 'wasOptimal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainPerformanceMetricsScalarFieldEnum = {
  id: 'id',
  domain: 'domain',
  totalExtractions: 'totalExtractions',
  successfulExtractions: 'successfulExtractions',
  averageExtractTime: 'averageExtractTime',
  averageTokens: 'averageTokens',
  averageCost: 'averageCost',
  optimalStrategy: 'optimalStrategy',
  optimalProvider: 'optimalProvider',
  averageCompleteness: 'averageCompleteness',
  hasStructuredDataPct: 'hasStructuredDataPct',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIProviderCostsScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  model: 'model',
  inputTokenCost: 'inputTokenCost',
  outputTokenCost: 'outputTokenCost',
  effectiveDate: 'effectiveDate',
  createdAt: 'createdAt'
};

exports.Prisma.AnonymousSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  operatingSystem: 'operatingSystem',
  browser: 'browser',
  screenResolution: 'screenResolution',
  timezone: 'timezone',
  language: 'language',
  firstSeenAt: 'firstSeenAt',
  lastSeenAt: 'lastSeenAt',
  totalRecipeAttempts: 'totalRecipeAttempts',
  totalSuccessfulExtractions: 'totalSuccessfulExtractions',
  hitRateLimit: 'hitRateLimit',
  rateLimitHitAt: 'rateLimitHitAt',
  showedSignupPrompt: 'showedSignupPrompt',
  signupPromptShownAt: 'signupPromptShownAt',
  convertedToUser: 'convertedToUser',
  convertedUserId: 'convertedUserId',
  convertedAt: 'convertedAt',
  referrerDomain: 'referrerDomain',
  countryCode: 'countryCode',
  cityName: 'cityName',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversionEventScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  eventType: 'eventType',
  eventData: 'eventData',
  recipeUrl: 'recipeUrl',
  pageUrl: 'pageUrl',
  sessionDuration: 'sessionDuration',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.DailyRateLimitScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  identifierType: 'identifierType',
  date: 'date',
  requestCount: 'requestCount',
  lastRequestAt: 'lastRequestAt',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InternalRecipeDataScalarFieldEnum = {
  id: 'id',
  title: 'title',
  sourceUrl: 'sourceUrl',
  domain: 'domain',
  extractedAt: 'extractedAt',
  createdAt: 'createdAt',
  extractionStrategy: 'extractionStrategy',
  aiProvider: 'aiProvider',
  totalProcessingTimeMs: 'totalProcessingTimeMs',
  fetchTimeMs: 'fetchTimeMs',
  parseTimeMs: 'parseTimeMs',
  aiTimeMs: 'aiTimeMs'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CookingSkillLevel = exports.$Enums.CookingSkillLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.ProcessingMethod = exports.$Enums.ProcessingMethod = {
  OPENAI: 'OPENAI',
  GEMINI: 'GEMINI'
};

exports.DietaryPreference = exports.$Enums.DietaryPreference = {
  NONE: 'NONE',
  VEGETARIAN: 'VEGETARIAN',
  VEGAN: 'VEGAN',
  GLUTEN_FREE: 'GLUTEN_FREE',
  DAIRY_FREE: 'DAIRY_FREE',
  KETO: 'KETO',
  PALEO: 'PALEO',
  LOW_CARB: 'LOW_CARB',
  LOW_SODIUM: 'LOW_SODIUM',
  NUT_FREE: 'NUT_FREE',
  KOSHER: 'KOSHER',
  HALAL: 'HALAL'
};

exports.CategorySource = exports.$Enums.CategorySource = {
  PREDEFINED: 'PREDEFINED',
  AI_GENERATED: 'AI_GENERATED',
  USER_CREATED: 'USER_CREATED'
};

exports.ExtractionStrategy = exports.$Enums.ExtractionStrategy = {
  URL_DIRECT: 'URL_DIRECT',
  HTML_FALLBACK: 'HTML_FALLBACK'
};

exports.AIProvider = exports.$Enums.AIProvider = {
  OPENAI_MINI: 'OPENAI_MINI',
  OPENAI_MAIN: 'OPENAI_MAIN',
  GEMINI_MAIN: 'GEMINI_MAIN',
  GEMINI_FLASH: 'GEMINI_FLASH'
};

exports.ConversionEventType = exports.$Enums.ConversionEventType = {
  SESSION_STARTED: 'SESSION_STARTED',
  RECIPE_EXTRACTED: 'RECIPE_EXTRACTED',
  RATE_LIMIT_HIT: 'RATE_LIMIT_HIT',
  SIGNUP_PROMPT_SHOWN: 'SIGNUP_PROMPT_SHOWN',
  SIGNUP_CLICKED: 'SIGNUP_CLICKED',
  SIGNUP_COMPLETED: 'SIGNUP_COMPLETED',
  RECIPE_SAVE_ATTEMPTED: 'RECIPE_SAVE_ATTEMPTED',
  FEATURE_INTERACTION: 'FEATURE_INTERACTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Recipe: 'Recipe',
  RecipeImage: 'RecipeImage',
  RecipeFavorite: 'RecipeFavorite',
  UserOnboardingProgress: 'UserOnboardingProgress',
  RecipeExtractionMetrics: 'RecipeExtractionMetrics',
  DomainPerformanceMetrics: 'DomainPerformanceMetrics',
  AIProviderCosts: 'AIProviderCosts',
  AnonymousSession: 'AnonymousSession',
  ConversionEvent: 'ConversionEvent',
  DailyRateLimit: 'DailyRateLimit',
  InternalRecipeData: 'InternalRecipeData'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

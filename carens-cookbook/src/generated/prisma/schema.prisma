// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums for user preferences
enum CookingSkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum DietaryPreference {
  NONE
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  KETO
  PALEO
  LOW_CARB
  LOW_SODIUM
  NUT_FREE
  KOSHER
  HALAL
}

enum ProcessingMethod {
  OPENAI
  GEMINI
}

// User model for Clerk integration
model User {
  id        String   @id // This will be the Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Onboarding status
  onboardingCompleted Boolean @default(false)
  onboardingStep      Int? // Track current onboarding step

  // User preferences
  cookingSkillLevel       CookingSkillLevel?
  dietaryPreferences      DietaryPreference[] // Multiple dietary preferences allowed
  favoriteCuisines        String[] // Array of cuisine types
  householdSize           Int? // Number of people in household
  defaultProcessingMethod ProcessingMethod    @default(OPENAI)

  // Additional preference fields
  preferredCategories String[] // User's preferred recipe categories
  timezone            String? // User's timezone
  measurementSystem   String? // Imperial/Metric preference

  // Relations
  recipes   Recipe[]
  favorites RecipeFavorite[]
}

// Enum for category source tracking
enum CategorySource {
  PREDEFINED // Category was matched to a predefined category
  AI_GENERATED // Category was suggested by AI and kept as-is
  USER_CREATED // Category was created by user or represents a new category
}

model Recipe {
  id          String   @id @default(cuid()) // Using CUID for IDs as a common Prisma pattern
  title       String
  description String
  ingredients String[] // Postgres array of strings
  steps       String[] // Postgres array of strings
  image       String? // Keep for backward compatibility, will be primary image
  cuisine     String
  category    String
  prepTime    String
  cleanupTime String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Enhanced category metadata
  categorySource     CategorySource? // How the category was determined
  categoryConfidence Float? // Confidence score from category matching (0.0-1.0)
  originalCategory   String? // Original AI-suggested category before resolution

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  favorites RecipeFavorite[]
  images    RecipeImage[]

  @@index([userId])
  @@index([userId, category]) // Performance index for category queries
  @@index([categorySource]) // Index for analytics queries
}

// New model for multiple recipe images
model RecipeImage {
  id        String   @id @default(cuid())
  url       String // Image URL or path
  alt       String? // Alt text for accessibility
  isPrimary Boolean  @default(false) // Primary image for recipe
  order     Int      @default(0) // Order for displaying images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Recipe relation
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([recipeId, order])
}

// Junction table for user favorites
model RecipeFavorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

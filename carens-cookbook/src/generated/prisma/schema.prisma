generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id
  email                   String                   @unique
  firstName               String?
  lastName                String?
  imageUrl                String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  cookingSkillLevel       CookingSkillLevel?
  defaultProcessingMethod ProcessingMethod         @default(OPENAI)
  dietaryPreferences      DietaryPreference[]
  favoriteCuisines        String[]
  householdSize           Int?
  measurementSystem       String?
  onboardingCompleted     Boolean                  @default(false)
  onboardingStep          Int?
  preferredCategories     String[]
  timezone                String?
  recipes                 Recipe[]
  favorites               RecipeFavorite[]
  onboardingProgress      UserOnboardingProgress[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Recipe {
  id                 String           @id @default(cuid())
  title              String
  description        String
  ingredients        String[]
  steps              String[]
  image              String?
  cuisine            String
  category           String
  prepTime           String
  cleanupTime        String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             String
  categoryConfidence Float?
  categorySource     CategorySource?
  originalCategory   String?
  mealType           String?
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites          RecipeFavorite[]
  images             RecipeImage[]

  @@index([userId])
  @@index([userId, category])
  @@index([categorySource])
  @@index([userId, mealType])
}

model RecipeImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([recipeId, order])
}

model RecipeFavorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}

model UserOnboardingProgress {
  id          String    @id @default(cuid())
  userId      String
  stepId      Int
  stepKey     String
  completedAt DateTime?
  skippedAt   DateTime?
  data        Json?
  isRequired  Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stepId])
  @@index([userId])
  @@index([userId, stepId])
}

enum CookingSkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum DietaryPreference {
  NONE
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  KETO
  PALEO
  LOW_CARB
  LOW_SODIUM
  NUT_FREE
  KOSHER
  HALAL
}

enum ProcessingMethod {
  OPENAI
  GEMINI
}

enum CategorySource {
  PREDEFINED
  AI_GENERATED
  USER_CREATED
}

enum ExtractionStrategy {
  URL_DIRECT
  HTML_FALLBACK
}

enum AIProvider {
  OPENAI_MINI
  OPENAI_MAIN
  GEMINI_MAIN
  GEMINI_FLASH
}

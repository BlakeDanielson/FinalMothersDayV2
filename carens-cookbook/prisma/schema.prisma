// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for Clerk integration
model User {
  id        String   @id // This will be the Clerk user ID
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes   Recipe[]
  favorites RecipeFavorite[]
}

model Recipe {
  id            String   @id @default(cuid()) // Using CUID for IDs as a common Prisma pattern
  title         String
  description   String
  ingredients   String[] // Postgres array of strings
  steps         String[] // Postgres array of strings
  image         String?  // Nullable
  cuisine       String
  category      String
  prepTime      String
  cleanupTime   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // User relation
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  favorites     RecipeFavorite[]

  @@index([userId])
}

// Junction table for user favorites
model RecipeFavorite {
  id       String @id @default(cuid())
  userId   String
  recipeId String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
}
